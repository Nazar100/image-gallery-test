{"version":3,"sources":["ImageGallery/ImageGalleryItem/ImageGalleryItem.jsx","ImageGallery/Button/Button.jsx","ImageGallery/ImageGallery.jsx","services/fetchImages.js","App.js","reportWebVitals.js","index.js"],"names":["ImageGalerryItem","image","src","url","alt","title","width","ButtonLoader","loadMoreImages","Button","onClick","variant","color","className","ImageGallery","state","images","showedImages","imagesNumber","paginanteImages","imagesToShow","slice","setState","prevState","axios","get","then","response","data","filter","index","albumId","prevProps","this","map","id","length","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mVAEe,SAASA,EAAT,GAAsC,IAAVC,EAAS,EAATA,MACzC,OAAO,qBAAKC,IAAKD,EAAME,IAAKC,IAAKH,EAAMI,MAAOC,MAAM,Q,kBCEvC,SAASC,EAAT,GAA2C,IAAnBC,EAAkB,EAAlBA,eACrC,OACE,8BACE,cAACC,EAAA,EAAD,CACEC,QAASF,EACTG,QAAQ,YACRC,MAAM,UACNC,UAAU,SAJZ,yB,ICoESC,E,4MApEbC,MAAQ,CACNC,OAAQ,GACRC,aAAc,GAEdC,aAAc,I,EAwBhBC,gBAAkB,WAAO,IAAD,EACW,EAAKJ,MAA9BC,EADc,EACdA,OAAQE,EADM,EACNA,aAEVE,EAAeJ,EAAOK,MAAM,EAAGH,GAErC,EAAKI,SAAS,CACZL,aAAa,YAAKG,M,EAMtBZ,eAAiB,WACf,EAAKc,UAAS,SAAAC,GAAS,MAAK,CAC1BL,aAAcK,EAAUL,aAAe,Q,kEAjCtB,IAAD,OCZbM,IAAMC,IAHI,+CAGYC,MAAK,SAAAC,GAChC,IAAMC,EAAOD,EAASC,KAEtB,OAAOA,EAAKC,QAAO,SAAC5B,EAAO6B,GACzB,OAEE7B,EAAM8B,QAAU,IAAM,GAEtBH,EAAKE,GAAOC,UAAYH,EAAKE,EAAQ,GAAGC,cDK9BL,MAAK,SAAAC,GACjB,EAAKL,SAAS,CACZN,OAAO,YAAKW,KAEd,EAAKR,uB,yCAMUa,EAAWT,GACxBA,EAAUL,eAAiBe,KAAKlB,MAAMG,cACxCe,KAAKd,oB,+BAwBC,IACAF,EAAiBgB,KAAKlB,MAAtBE,aACR,OACE,sBAAKJ,UAAU,YAAf,UACE,oBAAIA,UAAU,OAAd,SACGI,EAAaiB,KAAI,SAAAjC,GAChB,OACE,6BACE,cAAC,EAAD,CAAkBA,MAAOA,KADlBA,EAAMkC,SAOpBlB,EAAamB,OAAS,IACrB,cAAC,EAAD,CAAQ5B,eAAgByB,KAAKzB,wB,GA9DZ6B,aEAZC,MAJf,WACE,OAAO,cAAC,EAAD,KCQMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2d0f13fb.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nexport default function ImageGalerryItem({ image }) {\n  return <img src={image.url} alt={image.title} width=\"300\" />;\n}\n\nImageGalerryItem.propTypes = {\n  image: PropTypes.shape({\n    url: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n  }),\n};\n","import PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\n\nimport './Button.scss';\n\nexport default function ButtonLoader({ loadMoreImages }) {\n  return (\n    <div>\n      <Button\n        onClick={loadMoreImages}\n        variant=\"contained\"\n        color=\"primary\"\n        className=\"button\"\n      >\n        Show more\n      </Button>\n    </div>\n  );\n}\n\nButtonLoader.propTypes = {\n  loadMoreImages: PropTypes.func.isRequired,\n};\n","import { Component } from 'react';\n\nimport './ImageGallery.scss';\nimport fetchImages from '../services/fetchImages';\nimport ImageGalleryItem from './ImageGalleryItem/ImageGalleryItem';\nimport Button from './Button/Button';\n\nclass ImageGallery extends Component {\n  state = {\n    images: [],\n    showedImages: [],\n    // ImagesNumber indicates how many phowos should be\n    imagesNumber: 10,\n  };\n\n  // here I get Images from the fetch and set them in state 'Images'\n\n  componentDidMount() {\n    fetchImages().then(response => {\n      this.setState({\n        images: [...response],\n      });\n      this.paginanteImages();\n    });\n  }\n\n  // if state was updated I look how many Images should be added in DOM calling paginanteImages\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.imagesNumber !== this.state.imagesNumber) {\n      this.paginanteImages();\n    }\n  }\n\n  // here I select which photo should be added in DOM and set them in state 'showedImages'\n\n  paginanteImages = () => {\n    const { images, imagesNumber } = this.state;\n\n    const imagesToShow = images.slice(0, imagesNumber);\n\n    this.setState({\n      showedImages: [...imagesToShow],\n    });\n  };\n\n  // here I add 10 more pages to the ImagesNumber in state and subsequently in DOM\n\n  loadMoreImages = () => {\n    this.setState(prevState => ({\n      imagesNumber: prevState.imagesNumber + 10,\n    }));\n  };\n\n  render() {\n    const { showedImages } = this.state;\n    return (\n      <div className=\"container\">\n        <ul className=\"list\">\n          {showedImages.map(image => {\n            return (\n              <li key={image.id}>\n                <ImageGalleryItem image={image} />\n              </li>\n            );\n          })}\n        </ul>\n        {/* button is displayed only if there is more Images to load left */}\n        {showedImages.length < 50 && (\n          <Button loadMoreImages={this.loadMoreImages} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default ImageGallery;\n","import axios from 'axios';\n\nconst IMAGES_URL = 'https://jsonplaceholder.typicode.com/photos';\n\nexport default function fetchImages() {\n  return axios.get(IMAGES_URL).then(response => {\n    const data = response.data;\n\n    return data.filter((image, index) => {\n      return (\n        //   Here I filter albums with only even ID\n        image.albumId % 2 === 0 &&\n        //   Here I make sure that album id of element is not equal to the album id of preveaus element\n        data[index].albumId !== data[index - 1].albumId\n      );\n    });\n  });\n}\n","import \"./App.scss\";\nimport ImageGallery from \"./ImageGallery/ImageGallery\";\n\nfunction App() {\n  return <ImageGallery />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}